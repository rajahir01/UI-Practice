1. 
<h5 class='author-class' id='author-id'>By: Stacy Gray</h5>

CSS:
h5 {
  color: yellow;
}
 
.author-class {
  color: pink;
}
 
#author-id {
  color: cornflowerblue;
}

Each of these rules selects the same element in a different way. Which style will win the “specificity war”?
Because ID is the most specific selector, the element will change to cornflower blue. You may have noticed the other <h5> elements changed to yellow. This is because the most specific (and only) selector they have is their type.



2. combining multiple selectors, which we will refer to as chaining.

For instance, if there was a special class for <h1> elements, the CSS would look like below:
h1.special {
 
}
The code above would select only the <h1> elements with a class of special. If a <p> element also had a class of special, the rule in the example would not style the paragraph.




3.
Descendant Combinator

<ul class='main-list'>
  <li> ... </li>
  <li> ... </li>
  <li> ... </li>
</ul>

The nested <li> elements are descendants of the <ul> element and can be selected with the descendant combinator like so:

.main-list li {
 
}


li h4 {
  color:gold;
}

h4 {
  color:dodgerblue;
}

Will the <h4> elements turn blue? 

The elements stay gold because there is a more specific selector for <h4> elements you wrote in the last step. Because of the more specific CSS selector (li h4), the more general selector of h4 will not take hold.


5.
Important
 Once !important is used, it is very hard to override.

The syntax of !important in CSS looks like this:

p {
  color: blue !important;
}
 
.main p {
  color: red;
}

Since !important is used on the p selector’s color attribute, all p elements will appear blue, even though there is a more specific .main p selector that sets the color attribute to red



